<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\LED.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\LED.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Nov 10 16:43:01 2017
<BR><P>
<H3>Maximum Stack Usage =       1688 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vUARTCommandInterpreterTask &rArr; vCreateAndVerifySampleFiles &rArr; prvCreateDemoFileUsing_f_putc &rArr; prvCreatSenseDir &rArr; prvCreatSenseFile &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">CurrentTimerCallback</a> from data_report.o(i.CurrentTimerCallback) referenced from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">DS18B20TimerCallback</a> from data_report.o(i.DS18B20TimerCallback) referenced from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">HeartBeatTimerCallback</a> from data_report.o(i.HeartBeatTimerCallback) referenced from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">InfraredTempTimerCallback</a> from data_report.o(i.InfraredTempTimerCallback) referenced from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">SwitchTimerCallback</a> from data_report.o(i.SwitchTimerCallback) referenced from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
 <LI><a href="#[9]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from sim7600ce.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from sense_485.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">VibratorTimerCallback</a> from data_report.o(i.VibratorTimerCallback) referenced from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[4b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[49]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[52]">led0_task</a> from main.o(i.led0_task) referenced from main.o(i.start_task)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[67]">prvCDCommand</a> from file-releated-cli-commands.o(i.prvCDCommand) referenced from file-releated-cli-commands.o(.constdata)
 <LI><a href="#[6a]">prvCOPYCommand</a> from file-releated-cli-commands.o(i.prvCOPYCommand) referenced from file-releated-cli-commands.o(.constdata)
 <LI><a href="#[69]">prvDELCommand</a> from file-releated-cli-commands.o(i.prvDELCommand) referenced from file-releated-cli-commands.o(.constdata)
 <LI><a href="#[66]">prvDIRCommand</a> from file-releated-cli-commands.o(i.prvDIRCommand) referenced from file-releated-cli-commands.o(.constdata)
 <LI><a href="#[71]">prvEEPROM_CurrentAddrSaveCommand</a> from sample-cli-commands.o(i.prvEEPROM_CurrentAddrSaveCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[72]">prvEEPROM_InfraredTempAddrSaveCommand</a> from sample-cli-commands.o(i.prvEEPROM_InfraredTempAddrSaveCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[70]">prvEEPROM_MachineAddrSaveCommand</a> from sample-cli-commands.o(i.prvEEPROM_MachineAddrSaveCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[75]">prvEEPROM_SendTimeSaveCommand</a> from sample-cli-commands.o(i.prvEEPROM_SendTimeSaveCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[73]">prvEEPROM_VibratorAddrSaveCommand</a> from sample-cli-commands.o(i.prvEEPROM_VibratorAddrSaveCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[6f]">prvGetEvenFlagCommand</a> from sample-cli-commands.o(i.prvGetEvenFlagCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[6d]">prvGetRTCTimeCommand</a> from sample-cli-commands.o(i.prvGetRTCTimeCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[65]">prvHelpCommand</a> from freertos_cli.o(i.prvHelpCommand) referenced from freertos_cli.o(.constdata)
 <LI><a href="#[63]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6b]">prvRunTimeStatsCommand</a> from sample-cli-commands.o(i.prvRunTimeStatsCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[74]">prvSearchDS18B20Command</a> from sample-cli-commands.o(i.prvSearchDS18B20Command) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[6e]">prvSetRTCTimeCommand</a> from sample-cli-commands.o(i.prvSetRTCTimeCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[68]">prvTYPECommand</a> from file-releated-cli-commands.o(i.prvTYPECommand) referenced from file-releated-cli-commands.o(.constdata)
 <LI><a href="#[4d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[6c]">prvTaskStatsCommand</a> from sample-cli-commands.o(i.prvTaskStatsCommand) referenced from sample-cli-commands.o(.constdata)
 <LI><a href="#[64]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[50]">sd_getphy</a> from sddrv_f.o(i.sd_getphy) referenced from sddrv_f.o(i.sd_initfunc)
 <LI><a href="#[5c]">sd_initfunc</a> from sddrv_f.o(i.sd_initfunc) referenced from file-system-demo.o(i.vCreateAndVerifySampleFiles)
 <LI><a href="#[4e]">sd_readsector</a> from sddrv_f.o(i.sd_readsector) referenced from sddrv_f.o(i.sd_initfunc)
 <LI><a href="#[51]">sd_release</a> from sddrv_f.o(i.sd_release) referenced from sddrv_f.o(i.sd_initfunc)
 <LI><a href="#[4f]">sd_writesector</a> from sddrv_f.o(i.sd_writesector) referenced from sddrv_f.o(i.sd_initfunc)
 <LI><a href="#[4c]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
 <LI><a href="#[54]">vDS18B20GetTemperatureTask</a> from ds18b20_gettemperature.o(i.vDS18B20GetTemperatureTask) referenced from main.o(i.start_task)
 <LI><a href="#[56]">vSIM7600CE_TCPTask</a> from sim7600ce_tcp.o(i.vSIM7600CE_TCPTask) referenced from main.o(i.start_task)
 <LI><a href="#[55]">vSense_ModbusTask</a> from sense_modbus.o(i.vSense_ModbusTask) referenced from main.o(i.start_task)
 <LI><a href="#[5a]">vSwitchTask</a> from switch_task.o(i.vSwitchTask) referenced from main.o(i.start_task)
 <LI><a href="#[58]">vTCP_ReceCommTask</a> from communication_tcp.o(i.vTCP_ReceCommTask) referenced from main.o(i.start_task)
 <LI><a href="#[57]">vTCP_Rece_Task</a> from sim7600ce_tcp.o(i.vTCP_Rece_Task) referenced from main.o(i.start_task)
 <LI><a href="#[5b]">vTCP_ReconnectSockeTask</a> from communication_tcp.o(i.vTCP_ReconnectSockeTask) referenced from main.o(i.start_task)
 <LI><a href="#[59]">vTCP_SendCommTask</a> from communication_tcp.o(i.vTCP_SendCommTask) referenced from main.o(i.start_task)
 <LI><a href="#[53]">vUARTCommandInterpreterTask</a> from uartcommondserve.o(i.vUARTCommandInterpreterTask) referenced from main.o(i.start_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[77]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[20d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[20e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[20f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[210]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[207]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f8]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[76]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_initfunc
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_read
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_postformat
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CERece
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_initentry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_postformat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_extend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_initfunc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d8]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchDS18B20Command
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
</UL>

<P><STRONG><a name="[a3]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReceCommTask
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSIM7600CE_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Respose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ICCID
</UL>

<P><STRONG><a name="[e2]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIProcessCommand
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHelpCommand
</UL>

<P><STRONG><a name="[a0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskStatsCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunTimeStatsCommand
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetRTCTimeCommand
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIProcessCommand
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Respose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ICCID
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[1d5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskStatsCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunTimeStatsCommand
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetRTCTimeCommand
</UL>

<P><STRONG><a name="[e0]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIProcessCommand
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_initfunc
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getphy
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[217]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[84]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[8d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[82]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[219]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[21a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[21b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>AT24Cxx_ReadSerialByte</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, at24cxx.o(i.AT24Cxx_ReadSerialByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24Cxx_ReadSerialByte &rArr; I2C_Read_Byte &rArr; I2C_NAck &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
</UL>

<P><STRONG><a name="[9b]"></a>AT24Cxx_WriteSerialByte</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, at24cxx.o(i.AT24Cxx_WriteSerialByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AT24Cxx_WriteSerialByte &rArr; I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
</UL>

<P><STRONG><a name="[9d]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[101]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[10d]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>CMD_Respose</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sim7600ce_tcp.o(i.CMD_Respose))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CMD_Respose &rArr; SIM7600CESend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CESend
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReconnectSockeTask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
</UL>

<P><STRONG><a name="[a8]"></a>CmdError</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ab]"></a>CmdResp1Error</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ac]"></a>CmdResp2Error</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[ad]"></a>CmdResp3Error</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ae]"></a>CmdResp6Error</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[af]"></a>CmdResp7Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[b0]"></a>Computer_485_ModeRx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.Computer_485_ModeRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Computer_485_ModeRx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskStatsCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunTimeStatsCommand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetEvenFlagCommand
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
</UL>

<P><STRONG><a name="[b3]"></a>Computer_485_ModeTx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.Computer_485_ModeTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskStatsCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunTimeStatsCommand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetEvenFlagCommand
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
</UL>

<P><STRONG><a name="[b5]"></a>ConfigureTimeForRunTimeStats</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.ConfigureTimeForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigureTimeForRunTimeStats &rArr; TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5f]"></a>CurrentTimerCallback</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, data_report.o(i.CurrentTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CurrentTimerCallback &rArr; File_Add_Data &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
</UL>
<P><STRONG><a name="[bd]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TX_DMAReConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RX_DMAReConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DMA_InitCfg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTX_DMAReConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRX_DMAReConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitCfg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[bb]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DMA_InitCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitCfg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[157]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DMA_InitCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitCfg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[b9]"></a>DMA_InitCfg</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sense_485.o(i.DMA_InitCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_InitCfg &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_Init
</UL>

<P><STRONG><a name="[161]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TX_DMAReConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RX_DMAReConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTX_DMAReConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRX_DMAReConfig
</UL>

<P><STRONG><a name="[5d]"></a>DS18B20TimerCallback</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, data_report.o(i.DS18B20TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = DS18B20TimerCallback &rArr; File_Add_Data &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
</UL>
<P><STRONG><a name="[be]"></a>DS18B20_Check</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_Check &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[bf]"></a>DS18B20_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_Init &rArr; DS18B20_Rst &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
</UL>

<P><STRONG><a name="[c3]"></a>DS18B20_Read2Bit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read2Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_Read2Bit &rArr; DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
</UL>

<P><STRONG><a name="[c5]"></a>DS18B20_ReadDesignateTemper</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ds18b20.o(i.DS18B20_ReadDesignateTemper))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DS18B20_ReadDesignateTemper &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDS18B20GetTemperatureTask
</UL>

<P><STRONG><a name="[c4]"></a>DS18B20_Read_Bit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read2Bit
</UL>

<P><STRONG><a name="[c7]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_Read_Byte &rArr; DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[c2]"></a>DS18B20_Rst</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_Rst &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[c8]"></a>DS18B20_SearchROM</STRONG> (Thumb, 302 bytes, Stack size 120 bytes, ds18b20.o(i.DS18B20_SearchROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DS18B20_SearchROM &rArr; DS18B20_Read2Bit &rArr; DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read2Bit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_DS18B20
</UL>

<P><STRONG><a name="[ca]"></a>DS18B20_WriteBit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS18B20_WriteBit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
</UL>

<P><STRONG><a name="[c6]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_Write_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>EEPROM_Change_Addr</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, eeprom_save.o(i.EEPROM_Change_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchDS18B20Command
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_VibratorAddrSaveCommand
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_SendTimeSaveCommand
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_MachineAddrSaveCommand
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_InfraredTempAddrSaveCommand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_CurrentAddrSaveCommand
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimeExecute
</UL>

<P><STRONG><a name="[d1]"></a>EEPROM_Get_Addr</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, eeprom_save.o(i.EEPROM_Get_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EEPROM_Get_Addr &rArr; EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCrcCheck
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSIM7600CE_TCPTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMachineAddr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchDS18B20Command
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_VibratorAddrSaveCommand
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_MachineAddrSaveCommand
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_InfraredTempAddrSaveCommand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_CurrentAddrSaveCommand
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_InitAddr
</UL>

<P><STRONG><a name="[b8]"></a>File_Add_Data</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, file-system-demo.o(i.File_Add_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = File_Add_Data &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VibratorTimerCallback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTimerCallback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredTempTimerCallback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20TimerCallback
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentTimerCallback
</UL>

<P><STRONG><a name="[db]"></a>FindSCR</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[1c2]"></a>FreeRTOS_CLIGetParameter</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, freertos_cli.o(i.FreeRTOS_CLIGetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FreeRTOS_CLIGetParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchDS18B20Command
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetEvenFlagCommand
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_VibratorAddrSaveCommand
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_SendTimeSaveCommand
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_MachineAddrSaveCommand
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_InfraredTempAddrSaveCommand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_CurrentAddrSaveCommand
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
</UL>

<P><STRONG><a name="[df]"></a>FreeRTOS_CLIProcessCommand</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, freertos_cli.o(i.FreeRTOS_CLIProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FreeRTOS_CLIProcessCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNumberOfParameters
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
</UL>

<P><STRONG><a name="[e3]"></a>FreeRTOS_CLIRegisterCommand</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, freertos_cli.o(i.FreeRTOS_CLIRegisterCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FreeRTOS_CLIRegisterCommand &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRegisterSampleCLICommands
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRegisterFileSystemCLICommands
</UL>

<P><STRONG><a name="[c1]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_IO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IN
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitCfg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[eb]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_RESET
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_PWRKEY
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_IO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_ModeRx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
</UL>

<P><STRONG><a name="[b4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_RESET
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_PWRKEY
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_ModeTx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitCfg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HeartBeatTimerCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, data_report.o(i.HeartBeatTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HeartBeatTimerCallback &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
</UL>
<P><STRONG><a name="[e6]"></a>I2C_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Ack &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[e8]"></a>I2C_InitCfg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_InitCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_InitCfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>I2C_NAck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_NAck &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[99]"></a>I2C_Read_Byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, at24cxx.o(i.I2C_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read_Byte &rArr; I2C_NAck &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IN
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
</UL>

<P><STRONG><a name="[ea]"></a>I2C_SDA_IN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[e7]"></a>I2C_SDA_OUT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
</UL>

<P><STRONG><a name="[97]"></a>I2C_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, at24cxx.o(i.I2C_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Send_Byte &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteSerialByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
</UL>

<P><STRONG><a name="[96]"></a>I2C_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Start &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteSerialByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
</UL>

<P><STRONG><a name="[9a]"></a>I2C_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Stop &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_OUT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteSerialByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
</UL>

<P><STRONG><a name="[98]"></a>I2C_Wait_Ack</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, at24cxx.o(i.I2C_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Wait_Ack &rArr; I2C_Stop &rArr; I2C_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SDA_IN
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteSerialByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
</UL>

<P><STRONG><a name="[12d]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[12e]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[5e]"></a>InfraredTempTimerCallback</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, data_report.o(i.InfraredTempTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = InfraredTempTimerCallback &rArr; File_Add_Data &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
</UL>
<P><STRONG><a name="[ec]"></a>InitMachineAddr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eeprom_save.o(i.InitMachineAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InitMachineAddr &rArr; EEPROM_Get_Addr &rArr; EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[f0]"></a>IsCardProgramming</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCardProgramming
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[f9]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[f1]"></a>LED_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>MBCrcCheck</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, check_crc.o(i.MBCrcCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBCrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCrcCheck
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseRequest
</UL>

<P><STRONG><a name="[f2]"></a>Machine_Register_CMD</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, communication_tcp.o(i.Machine_Register_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Machine_Register_CMD &rArr; SenseDS18B20_Register &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_Register
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDS18B20_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_SendCommTask
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReconnectSockeTask
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1b6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[ba]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DMA_InitCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitCfg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[ff]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[c0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[9e]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[15f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[104]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[102]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[106]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[105]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[fc]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[10c]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[f7]"></a>RTC_Get</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[fb]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[fe]"></a>RTC_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC_Init &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>RTC_Set</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
</UL>

<P><STRONG><a name="[110]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[10a]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[fd]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[111]"></a>ReadData</STRONG> (Thumb, 398 bytes, Stack size 144 bytes, sense_modbus.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ReadData &rArr; SenseRequest &rArr; UartSend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRece
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseRequest
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseAsk
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSense_ModbusTask
</UL>

<P><STRONG><a name="[117]"></a>ReceCmd</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, communication_tcp.o(i.ReceCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ReceCmd &rArr; ChangeTimeExecute &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOutputExecute
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimeExecute
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceSperate
</UL>

<P><STRONG><a name="[d2]"></a>ReceCrcCheck</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, check_crc.o(i.ReceCrcCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReceCrcCheck &rArr; MBCrcCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCmd
</UL>

<P><STRONG><a name="[119]"></a>ReceSperate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, communication_tcp.o(i.ReceSperate))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ReceSperate &rArr; ReceCmd &rArr; ChangeTimeExecute &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReceCommTask
</UL>

<P><STRONG><a name="[a7]"></a>ReportCmd</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, communication_tcp.o(i.ReportCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Machine_Register_CMD
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOutputExecute
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_Register
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDS18B20_Register
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimeExecute
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VibratorTimerCallback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTimerCallback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredTempTimerCallback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatTimerCallback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20TimerCallback
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentTimerCallback
</UL>

<P><STRONG><a name="[11b]"></a>SDEnWideBus</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[aa]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[12a]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[125]"></a>SDIO_Clock_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[12f]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[dd]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[120]"></a>SDIO_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[a9]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[127]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[de]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[dc]"></a>SDIO_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[129]"></a>SDIO_SetPowerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[134]"></a>SDIO_WriteData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[11d]"></a>SD_DMA_Config</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[11e]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[123]"></a>SD_GetCardInfo</STRONG> (Thumb, 772 bytes, Stack size 20 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11f]"></a>SD_Init</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_initfunc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
</UL>

<P><STRONG><a name="[122]"></a>SD_InitializeCards</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[121]"></a>SD_PowerON</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_PowerON &rArr; CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11c]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>SD_ReadBlock</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[130]"></a>SD_ReadDisk</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
</UL>

<P><STRONG><a name="[132]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 698 bytes, Stack size 56 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[124]"></a>SD_SelectDeselect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[126]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[133]"></a>SD_WriteBlock</STRONG> (Thumb, 844 bytes, Stack size 80 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[135]"></a>SD_WriteDisk</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
</UL>

<P><STRONG><a name="[136]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 920 bytes, Stack size 72 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[137]"></a>SIM7600CERece</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sim7600ce.o(i.SIM7600CERece))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SIM7600CERece &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_Rece_Task
</UL>

<P><STRONG><a name="[a1]"></a>SIM7600CESend</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sim7600ce.o(i.SIM7600CESend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SIM7600CESend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2TX_DMAReConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSIM7600CE_TCPTask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Respose
</UL>

<P><STRONG><a name="[13a]"></a>SIM7600CE_IO_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sim7600ce.o(i.SIM7600CE_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIM7600CE_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_Init
</UL>

<P><STRONG><a name="[13b]"></a>SIM7600CE_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sim7600ce.o(i.SIM7600CE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SIM7600CE_Init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DMA_InitCfg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_IO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
</UL>

<P><STRONG><a name="[13f]"></a>SIM7600CE_InitCfg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sim7600ce_tcp.o(i.SIM7600CE_InitCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SIM7600CE_InitCfg &rArr; SetSocket &rArr; CMD_Respose &rArr; SIM7600CESend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_RESET
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_PWRKEY
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSIM7600CE_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSIM7600CE_TCPTask
</UL>

<P><STRONG><a name="[141]"></a>SIM7600CE_PWRKEY</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sim7600ce.o(i.SIM7600CE_PWRKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SIM7600CE_PWRKEY &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
</UL>

<P><STRONG><a name="[140]"></a>SIM7600CE_RESET</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sim7600ce.o(i.SIM7600CE_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SIM7600CE_RESET &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
</UL>

<P><STRONG><a name="[144]"></a>Search_DS18B20</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ds18b20_gettemperature.o(i.Search_DS18B20))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Search_DS18B20 &rArr; DS18B20_SearchROM &rArr; DS18B20_Read2Bit &rArr; DS18B20_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchDS18B20Command
</UL>

<P><STRONG><a name="[145]"></a>Sense_485_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sense_485.o(i.Sense_485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Sense_485_Init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitCfg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSense_ModbusTask
</UL>

<P><STRONG><a name="[147]"></a>Sense_485_ModeRx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sense_485.o(i.Sense_485_ModeRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sense_485_ModeRx
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>Sense_485_ModeTx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sense_485.o(i.Sense_485_ModeTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sense_485_ModeTx
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
</UL>

<P><STRONG><a name="[143]"></a>SetSocket</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, sim7600ce_tcp.o(i.SetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SetSocket &rArr; CMD_Respose &rArr; SIM7600CESend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Respose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ICCID
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
</UL>

<P><STRONG><a name="[14c]"></a>SwitchIO_Init</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, switch_io.o(i.SwitchIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SwitchIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>SwitchTimerCallback</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, data_report.o(i.SwitchTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SwitchTimerCallback &rArr; File_Add_Data &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
</UL>
<P><STRONG><a name="[196]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>TIM3_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
</UL>

<P><STRONG><a name="[150]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[14f]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[151]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART1_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>USART2_DMA_InitCfg</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sim7600ce.o(i.USART2_DMA_InitCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_DMA_InitCfg &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_Init
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sim7600ce.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART2_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2RX_DMAReConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>USART2_InitCfg</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sim7600ce.o(i.USART2_InitCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART2_InitCfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_Init
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sense_485.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USART3_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRX_DMAReConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_ModeRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>USART3_InitCfg</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, sense_485.o(i.USART3_InitCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART3_InitCfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_Init
</UL>

<P><STRONG><a name="[15a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[138]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CESend
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
</UL>

<P><STRONG><a name="[154]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[15b]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_InitCfg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_InitCfg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[155]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>UartRece</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sense_485.o(i.UartRece))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UartRece &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[116]"></a>UartSend</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sense_485.o(i.UartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UartSend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartTX_DMAReConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_ModeTx
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseRequest
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>Usart2RX_DMAReConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sim7600ce.o(i.Usart2RX_DMAReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart2RX_DMAReConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>Usart2TX_DMAReConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sim7600ce.o(i.Usart2TX_DMAReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart2TX_DMAReConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CESend
</UL>

<P><STRONG><a name="[15e]"></a>UsartRX_DMAReConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sense_485.o(i.UsartRX_DMAReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsartRX_DMAReConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>UsartTX_DMAReConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sense_485.o(i.UsartTX_DMAReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsartTX_DMAReConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
</UL>

<P><STRONG><a name="[60]"></a>VibratorTimerCallback</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, data_report.o(i.VibratorTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = VibratorTimerCallback &rArr; File_Add_Data &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sim7600ce_tcp.o(i.vSIM7600CE_TCPTask)
</UL>
<P><STRONG><a name="[142]"></a>WaitSIM7600CE_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sim7600ce_tcp.o(i.WaitSIM7600CE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WaitSIM7600CE_Init &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
</UL>

<P><STRONG><a name="[162]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskStatsCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunTimeStatsCommand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetEvenFlagCommand
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writesector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readsector
</UL>

<P><STRONG><a name="[21f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[220]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[164]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[221]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1d2]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
</UL>

<P><STRONG><a name="[222]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[223]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[165]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[224]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d3]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSearchDS18B20Command
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetRTCTimeCommand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetEvenFlagCommand
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_VibratorAddrSaveCommand
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_SendTimeSaveCommand
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_MachineAddrSaveCommand
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_InfraredTempAddrSaveCommand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEEPROM_CurrentAddrSaveCommand
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDataInformationWrite
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateFileInfoString
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[225]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[226]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[227]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[228]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[229]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[166]"></a>_f_addentry</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, dir.o(i._f_addentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _f_addentry &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_igettimedate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writefatsector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_alloccluster
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_initentry
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[16d]"></a>_f_alloccluster</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fat.o(i._f_alloccluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
</UL>

<P><STRONG><a name="[171]"></a>_f_checkname</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, util_sfn.o(i._f_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _f_checkname &rArr; _f_checknameprim
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknameprim
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknamewc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findfirst
</UL>

<P><STRONG><a name="[173]"></a>_f_checknamewc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, util_sfn.o(i._f_checknamewc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _f_checknamewc &rArr; _f_checkname &rArr; _f_checknameprim
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_chdir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>

<P><STRONG><a name="[180]"></a>_f_checkstatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv.o(i._f_checkstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _f_checkstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
</UL>

<P><STRONG><a name="[16c]"></a>_f_clustertopos</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fat.o(i._f_clustertopos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _f_clustertopos
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getcurrsector
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[177]"></a>_f_findfilewc</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, dir.o(i._f_findfilewc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>

<P><STRONG><a name="[178]"></a>_f_findpath</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, dir.o(i._f_findpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setnameext
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getdecluster
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findfirst
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_chdir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>

<P><STRONG><a name="[16b]"></a>_f_getclustervalue</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, fat.o(i._f_getclustervalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getword
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getlong
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getfatsector
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_removechain
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getcurrsector
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_alloccluster
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
</UL>

<P><STRONG><a name="[176]"></a>_f_getcurrsector</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fat.o(i._f_getcurrsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _f_getcurrsector &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_extend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_read
</UL>

<P><STRONG><a name="[17a]"></a>_f_getdecluster</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dir.o(i._f_getdecluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _f_getdecluster
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getword
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>

<P><STRONG><a name="[17c]"></a>_f_getfatsector</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fat.o(i._f_getfatsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
</UL>

<P><STRONG><a name="[17e]"></a>_f_getlong</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, util.o(i._f_getlong))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readbootrecord
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
</UL>

<P><STRONG><a name="[17f]"></a>_f_getvolume</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, volume.o(i._f_getvolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _f_getvolume &rArr; _f_readbootrecord &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checkstatus
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readbootrecord
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findfirst
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_chdir
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_initvolume
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_seek
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_read
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_hardformat
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_close
</UL>

<P><STRONG><a name="[17d]"></a>_f_getword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, util.o(i._f_getword))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getdecluster
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readbootrecord
</UL>

<P><STRONG><a name="[167]"></a>_f_readglsector</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drv.o(i._f_readglsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getcurrsector
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readbootrecord
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getfatsector
</UL>

<P><STRONG><a name="[185]"></a>_f_removechain</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fat.o(i._f_removechain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _f_removechain &rArr; _f_setclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writefatsector
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>

<P><STRONG><a name="[16e]"></a>_f_setclustervalue</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, fat.o(i._f_setclustervalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _f_setclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getword
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getlong
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setlong
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getfatsector
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_removechain
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
</UL>

<P><STRONG><a name="[187]"></a>_f_setdecluster</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dir.o(i._f_setdecluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _f_setdecluster
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
</UL>

<P><STRONG><a name="[188]"></a>_f_setfsname</STRONG> (Thumb, 332 bytes, Stack size 96 bytes, util_sfn.o(i._f_setfsname))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _f_setfsname &rArr; _f_setnameext
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setnameext
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_getcwd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findfirst
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_chdir
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>

<P><STRONG><a name="[186]"></a>_f_setlong</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i._f_setlong))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlong
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[179]"></a>_f_setnameext</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, util_sfn.o(i._f_setnameext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _f_setnameext
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
</UL>

<P><STRONG><a name="[16a]"></a>_f_setword</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, util.o(i._f_setword))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setdecluster
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_initentry
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setword
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[18a]"></a>_f_toupper</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i._f_toupper))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setnameext
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
</UL>

<P><STRONG><a name="[16f]"></a>_f_writefatsector</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fat.o(i._f_writefatsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _f_writefatsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_removechain
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
</UL>

<P><STRONG><a name="[170]"></a>_f_writeglsector</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, drv.o(i._f_writeglsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _f_writeglsector
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writefatsector
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_postformat
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_extend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_read
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_close
</UL>

<P><STRONG><a name="[18e]"></a>_setchar</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, util.o(i._setchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _setchar
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setcharzero
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
</UL>

<P><STRONG><a name="[18d]"></a>_setcharzero</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, util.o(i._setcharzero))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setchar
</UL>

<P><STRONG><a name="[18c]"></a>_setlong</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, util.o(i._setlong))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _setlong
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setlong
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
</UL>

<P><STRONG><a name="[18f]"></a>_setword</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, util.o(i._setword))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _setword
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
</UL>

<P><STRONG><a name="[12c]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[195]"></a>delay_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[b1]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[9c]"></a>delay_xms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_xms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_xms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteSerialByte
</UL>

<P><STRONG><a name="[197]"></a>eTaskGetState</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eTaskGetState &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[169]"></a>f_igettimedate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, util.o(i.f_igettimedate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = f_igettimedate
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psp_getcurrenttimedate
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_initentry
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[199]"></a>fn_chdir</STRONG> (Thumb, 148 bytes, Stack size 112 bytes, dir.o(i.fn_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fn_chdir &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknamewc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getfilename
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
</UL>

<P><STRONG><a name="[19b]"></a>fn_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, file.o(i.fn_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fn_close &rArr; _f_updatefileentry &rArr; _f_removechain &rArr; _f_setclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
</UL>

<P><STRONG><a name="[19c]"></a>fn_delete</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, file.o(i.fn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fn_delete &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_removechain
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknamewc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getdecluster
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete
</UL>

<P><STRONG><a name="[19d]"></a>fn_filelength</STRONG> (Thumb, 106 bytes, Stack size 112 bytes, file.o(i.fn_filelength))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fn_filelength &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getlong
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknamewc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filelength
</UL>

<P><STRONG><a name="[19e]"></a>fn_findfirst</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dir.o(i.fn_findfirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fn_findfirst &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checkname
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findfirst
</UL>

<P><STRONG><a name="[19f]"></a>fn_findnext</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, dir.o(i.fn_findnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fn_findnext &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getword
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getlong
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getdecluster
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getfilename
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findfirst
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findnext
</UL>

<P><STRONG><a name="[1a0]"></a>fn_getc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, file.o(i.fn_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fn_getc &rArr; fn_read &rArr; _f_getcurrsector &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getc
</UL>

<P><STRONG><a name="[189]"></a>fn_getcwd</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, dir.o(i.fn_getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fn_getcwd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getcwd
</UL>

<P><STRONG><a name="[1a2]"></a>fn_hardformat</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, volume.o(i.fn_hardformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fn_hardformat &rArr; _f_postformat &rArr; _f_writebootrecord &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_prepareformat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_postformat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_hardformat
</UL>

<P><STRONG><a name="[1a4]"></a>fn_initvolume</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, volume.o(i.fn_initvolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fn_initvolume &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateAndVerifySampleFiles
</UL>

<P><STRONG><a name="[1a6]"></a>fn_mkdir</STRONG> (Thumb, 406 bytes, Stack size 136 bytes, dir.o(i.fn_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fn_mkdir &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writefatsector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknamewc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_alloccluster
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setdecluster
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_initentry
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_mkdir
</UL>

<P><STRONG><a name="[1a7]"></a>fn_open</STRONG> (Thumb, 768 bytes, Stack size 112 bytes, file.o(i.fn_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_igettimedate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setfsname
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_removechain
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getlong
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checknamewc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getdecluster
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findpath
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_findfilewc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setlong
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
</UL>

<P><STRONG><a name="[1a1]"></a>fn_read</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, file.o(i.fn_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fn_read &rArr; _f_getcurrsector &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getcurrsector
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_getc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_read
</UL>

<P><STRONG><a name="[1a8]"></a>fn_rewind</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, file.o(i.fn_rewind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fn_rewind &rArr; fn_seek &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rewind
</UL>

<P><STRONG><a name="[1a9]"></a>fn_seek</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, file.o(i.fn_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fn_seek &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_rewind
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_seek
</UL>

<P><STRONG><a name="[1aa]"></a>fn_write</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, file.o(i.fn_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fn_write &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getcurrsector
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_updatefileentry
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_write
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fputc &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d4]"></a>fr_chdir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fr_chdir &rArr; fn_chdir &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_chdir
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
</UL>

<P><STRONG><a name="[da]"></a>fr_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fr_close &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformCopy
</UL>

<P><STRONG><a name="[1ab]"></a>fr_delete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fr_delete &rArr; fn_delete &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDELCommand
</UL>

<P><STRONG><a name="[1ac]"></a>fr_filelength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_filelength))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fr_filelength &rArr; fn_filelength &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_filelength
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
</UL>

<P><STRONG><a name="[1ad]"></a>fr_findfirst</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, f_lock.o(i.fr_findfirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fr_findfirst &rArr; fn_findfirst &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findfirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
</UL>

<P><STRONG><a name="[1ae]"></a>fr_findnext</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_findnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fr_findnext &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
</UL>

<P><STRONG><a name="[1af]"></a>fr_getc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, f_lock.o(i.fr_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fr_getc &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
</UL>

<P><STRONG><a name="[1b0]"></a>fr_getcwd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, f_lock.o(i.fr_getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fr_getcwd &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_getcwd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCDCommand
</UL>

<P><STRONG><a name="[1b1]"></a>fr_hardformat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_hardformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fr_hardformat &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_hardformat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateAndVerifySampleFiles
</UL>

<P><STRONG><a name="[1b2]"></a>fr_mkdir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = fr_mkdir &rArr; fn_mkdir &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
</UL>

<P><STRONG><a name="[d6]"></a>fr_open</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, f_lock.o(i.fr_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTYPECommand
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformCopy
</UL>

<P><STRONG><a name="[1b3]"></a>fr_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, f_lock.o(i.fr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fr_read &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformCopy
</UL>

<P><STRONG><a name="[1b4]"></a>fr_rewind</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, f_lock.o(i.fr_rewind))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fr_rewind &rArr; fn_rewind &rArr; fn_seek &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_rewind
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
</UL>

<P><STRONG><a name="[1b5]"></a>fr_seek</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, f_lock.o(i.fr_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fr_seek &rArr; fn_seek &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformCopy
</UL>

<P><STRONG><a name="[d9]"></a>fr_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, f_lock.o(i.fr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fr_write &rArr; fn_write &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformCopy
</UL>

<P><STRONG><a name="[52]"></a>led0_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.led0_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = led0_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRegisterSampleCLICommands
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRegisterFileSystemCLICommands
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchIO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InitCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[198]"></a>psp_getcurrenttimedate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, psp_rtc.o(i.psp_getcurrenttimedate))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_igettimedate
</UL>

<P><STRONG><a name="[e4]"></a>pvPortMalloc</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetRTCTimeCommand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
</UL>

<P><STRONG><a name="[209]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1db]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[5c]"></a>sd_initfunc</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sddrv_f.o(i.sd_initfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sd_initfunc &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file-system-demo.o(i.vCreateAndVerifySampleFiles)
</UL>
<P><STRONG><a name="[4c]"></a>start_task</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = start_task &rArr; InitMachineAddr &rArr; EEPROM_Get_Addr &rArr; EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMachineAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1b7]"></a>uart_init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[11a]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(i.uxQueueSpacesAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uxQueueSpacesAvailable &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_Rece_Task
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>

<P><STRONG><a name="[1f5]"></a>uxTaskGetSystemState</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tasks.o(i.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[205]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1f6]"></a>vCreateAndVerifySampleFiles</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file-system-demo.o(i.vCreateAndVerifySampleFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = vCreateAndVerifySampleFiles &rArr; prvCreateDemoFileUsing_f_putc &rArr; prvCreatSenseDir &rArr; prvCreatSenseFile &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_initvolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_hardformat
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
</UL>

<P><STRONG><a name="[54]"></a>vDS18B20GetTemperatureTask</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ds18b20_gettemperature.o(i.vDS18B20GetTemperatureTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = vDS18B20GetTemperatureTask &rArr; Init_DS18B20 &rArr; EEPROM_Get_Addr &rArr; EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadDesignateTemper
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[1c5]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1da]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1bf]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1be]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[cc]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortEnterCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDS18B20GetTemperatureTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_DS18B20
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
</UL>

<P><STRONG><a name="[cd]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDS18B20GetTemperatureTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DS18B20
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_DS18B20
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
</UL>

<P><STRONG><a name="[1d3]"></a>vPortFree</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
</UL>

<P><STRONG><a name="[206]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1f7]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortValidateInterruptPriority &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c6]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1e8]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1b9]"></a>vRegisterFileSystemCLICommands</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, file-releated-cli-commands.o(i.vRegisterFileSystemCLICommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vRegisterFileSystemCLICommands &rArr; FreeRTOS_CLIRegisterCommand &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>vRegisterSampleCLICommands</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sample-cli-commands.o(i.vRegisterSampleCLICommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vRegisterSampleCLICommands &rArr; FreeRTOS_CLIRegisterCommand &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIRegisterCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>vSIM7600CE_TCPTask</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, sim7600ce_tcp.o(i.vSIM7600CE_TCPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = vSIM7600CE_TCPTask &rArr; SIM7600CE_InitCfg &rArr; SetSocket &rArr; CMD_Respose &rArr; SIM7600CESend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CESend
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[55]"></a>vSense_ModbusTask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sense_modbus.o(i.vSense_ModbusTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = vSense_ModbusTask &rArr; ReadData &rArr; SenseRequest &rArr; UartSend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_InitAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[5a]"></a>vSwitchTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, switch_task.o(i.vSwitchTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vSwitchTask &rArr; InputExecute &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputExecute
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[58]"></a>vTCP_ReceCommTask</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, communication_tcp.o(i.vTCP_ReceCommTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = vTCP_ReceCommTask &rArr; ReceSperate &rArr; ReceCmd &rArr; ChangeTimeExecute &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceSperate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[57]"></a>vTCP_Rece_Task</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sim7600ce_tcp.o(i.vTCP_Rece_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vTCP_Rece_Task &rArr; SIM7600CERece &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CERece
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[5b]"></a>vTCP_ReconnectSockeTask</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, communication_tcp.o(i.vTCP_ReconnectSockeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = vTCP_ReconnectSockeTask &rArr; Machine_Register_CMD &rArr; SenseDS18B20_Register &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Machine_Register_CMD
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Respose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[59]"></a>vTCP_SendCommTask</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, communication_tcp.o(i.vTCP_SendCommTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = vTCP_SendCommTask &rArr; Machine_Register_CMD &rArr; SenseDS18B20_Register &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Machine_Register_CMD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[115]"></a>vTaskDelay</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_RESET
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_PWRKEY
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSwitchTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDS18B20GetTemperatureTask
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led0_task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_InitCfg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[1f4]"></a>vTaskDelete</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1e1]"></a>vTaskGetInfo</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(i.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[1e9]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.vTaskGetRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskGetRunTimeStats &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvRunTimeStatsCommand
</UL>

<P><STRONG><a name="[1ec]"></a>vTaskList</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(i.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskStatsCommand
</UL>

<P><STRONG><a name="[1ef]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1fd]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1f9]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1fe]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1ff]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[200]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSetTimeOutState &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1bb]"></a>vTaskStartScheduler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[79]"></a>vTaskSwitchContext</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[53]"></a>vUARTCommandInterpreterTask</STRONG> (Thumb, 212 bytes, Stack size 1088 bytes, uartcommondserve.o(i.vUARTCommandInterpreterTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = vUARTCommandInterpreterTask &rArr; vCreateAndVerifySampleFiles &rArr; prvCreateDemoFileUsing_f_putc &rArr; prvCreatSenseDir &rArr; prvCreatSenseFile &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateAndVerifySampleFiles
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIProcessCommand
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[b7]"></a>xEventGroupClearBits</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xEventGroupClearBits &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReconnectSockeTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetEvenFlagCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputExecute
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExecute
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOutputExecute
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VibratorTimerCallback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchTimerCallback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InfraredTempTimerCallback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatTimerCallback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20TimerCallback
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentTimerCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[1f3]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSwitchTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[ef]"></a>xEventGroupSetBits</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReceCommTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSwitchTask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSIM7600CE_TCPTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExecute
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOutputExecute
</UL>

<P><STRONG><a name="[f5]"></a>xEventGroupWaitBits</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_SendCommTask
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReconnectSockeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReceCommTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Machine_Register_CMD
</UL>

<P><STRONG><a name="[202]"></a>xPortStartScheduler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[14e]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a5]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_initvolume
</UL>

<P><STRONG><a name="[13e]"></a>xQueueGenericCreate</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CE_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_485_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[a2]"></a>xQueueGenericReceive</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CESend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CERece
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRece
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTCommandInterpreterTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReceCommTask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSIM7600CE_TCPTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_seek
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rewind
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_mkdir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_hardformat
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getcwd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findnext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findfirst
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filelength
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSIM7600CE_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Respose
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
</UL>

<P><STRONG><a name="[1d8]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[ce]"></a>xQueueGenericSend</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_Rece_Task
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_seek
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rewind
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_mkdir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_hardformat
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getcwd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findnext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findfirst
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filelength
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GetData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ChangeData
</UL>

<P><STRONG><a name="[156]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[159]"></a>xQueueGiveFromISR</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ba]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[14d]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1ea]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_SendCommTask
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReconnectSockeTask
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[208]"></a>xTaskIncrementTick</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1cd]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1e3]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[203]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskRemoveFromUnorderedEventList &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[1c9]"></a>xTaskResumeAll</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[1fa]"></a>xTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSIM7600CE_TCPTask
</UL>

<P><STRONG><a name="[201]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a6]"></a>xTimerGenericCommand</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_SendCommTask
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReconnectSockeTask
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCP_ReceCommTask
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimeExecute
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14a]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14b]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[10e]"></a>RTC_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(i.RTC_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[204]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[1cb]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1cc]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[1d6]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1d7]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1de]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1df]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1e2]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1ee]"></a>prvUnlockQueue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1bc]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1c0]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1c7]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1ca]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[63]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1d9]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewTask &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1c1]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1e0]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[1fb]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1fc]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.prvTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[1f0]"></a>prvWriteNameToBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.prvWriteNameToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvWriteNameToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[1c4]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1ed]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1dc]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[1dd]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1e4]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1e5]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1e7]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1e6]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1eb]"></a>prvSwitchTimerLists</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[64]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1f1]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f2]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4d]"></a>prvTaskExitError</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[19a]"></a>_f_getfilename</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, dir.o(i._f_getfilename))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _f_getfilename
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_findnext
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_chdir
</UL>

<P><STRONG><a name="[168]"></a>_f_initentry</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dir.o(i._f_initentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _f_initentry &rArr; f_igettimedate
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_igettimedate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_mkdir
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_addentry
</UL>

<P><STRONG><a name="[174]"></a>_f_extend</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, file.o(i._f_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getcurrsector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_stepnextsector
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_fseek
</UL>

<P><STRONG><a name="[17b]"></a>_f_fseek</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, file.o(i._f_fseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_seek
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_open
</UL>

<P><STRONG><a name="[175]"></a>_f_stepnextsector</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, file.o(i._f_stepnextsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writefatsector
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setclustervalue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getclustervalue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_clustertopos
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_alloccluster
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_extend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
</UL>

<P><STRONG><a name="[18b]"></a>_f_updatefileentry</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, file.o(i._f_updatefileentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _f_updatefileentry &rArr; _f_removechain &rArr; _f_setclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_igettimedate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setword
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_removechain
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setdecluster
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_setlong
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_close
</UL>

<P><STRONG><a name="[172]"></a>_f_checknameprim</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, util_sfn.o(i._f_checknameprim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _f_checknameprim
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_checkname
</UL>

<P><STRONG><a name="[183]"></a>_f_buildsectors</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, volume.o(i._f_buildsectors))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_postformat
</UL>

<P><STRONG><a name="[182]"></a>_f_postformat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, volume.o(i._f_postformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _f_postformat &rArr; _f_writebootrecord &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writebootrecord
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_buildsectors
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_hardformat
</UL>

<P><STRONG><a name="[1a3]"></a>_f_prepareformat</STRONG> (Thumb, 322 bytes, Stack size 20 bytes, volume.o(i._f_prepareformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _f_prepareformat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_hardformat
</UL>

<P><STRONG><a name="[181]"></a>_f_readbootrecord</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, volume.o(i._f_readbootrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _f_readbootrecord &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_readglsector
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getword
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getlong
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_getvolume
</UL>

<P><STRONG><a name="[184]"></a>_f_writebootrecord</STRONG> (Thumb, 640 bytes, Stack size 56 bytes, volume.o(i._f_writebootrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _f_writebootrecord &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_writeglsector
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setword
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlong
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setcharzero
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setchar
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f_postformat
</UL>

<P><STRONG><a name="[e1]"></a>prvGetNumberOfParameters</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, freertos_cli.o(i.prvGetNumberOfParameters))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIProcessCommand
</UL>

<P><STRONG><a name="[65]"></a>prvHelpCommand</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, freertos_cli.o(i.prvHelpCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvHelpCommand &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_cli.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>prvCDCommand</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, file-releated-cli-commands.o(i.prvCDCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvCDCommand &rArr; fr_chdir &rArr; fn_chdir &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getcwd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file-releated-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>prvCOPYCommand</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, file-releated-cli-commands.o(i.prvCOPYCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = prvCOPYCommand &rArr; prvPerformCopy &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPerformCopy
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filelength
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file-releated-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>prvCreateFileInfoString</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, file-releated-cli-commands.o(i.prvCreateFileInfoString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvCreateFileInfoString &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDIRCommand
</UL>

<P><STRONG><a name="[69]"></a>prvDELCommand</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, file-releated-cli-commands.o(i.prvDELCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = prvDELCommand &rArr; fr_delete &rArr; fn_delete &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file-releated-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>prvDIRCommand</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, file-releated-cli-commands.o(i.prvDIRCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvDIRCommand &rArr; fr_findfirst &rArr; fn_findfirst &rArr; _f_findpath &rArr; _f_findfilewc &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateFileInfoString
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findnext
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findfirst
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file-releated-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>prvPerformCopy</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, file-releated-cli-commands.o(i.prvPerformCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvPerformCopy &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_seek
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCOPYCommand
</UL>

<P><STRONG><a name="[68]"></a>prvTYPECommand</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, file-releated-cli-commands.o(i.prvTYPECommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = prvTYPECommand &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file-releated-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>prvCreatSenseDir</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, file-system-demo.o(i.prvCreatSenseDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = prvCreatSenseDir &rArr; prvCreatSenseFile &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseFile
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreateDemoFileUsing_f_putc
</UL>

<P><STRONG><a name="[1cf]"></a>prvCreatSenseFile</STRONG> (Thumb, 246 bytes, Stack size 224 bytes, file-system-demo.o(i.prvCreatSenseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = prvCreatSenseFile &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rewind
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_findfirst
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_close
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_chdir
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
</UL>

<P><STRONG><a name="[1d0]"></a>prvCreateDemoFileUsing_f_putc</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, file-system-demo.o(i.prvCreateDemoFileUsing_f_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = prvCreateDemoFileUsing_f_putc &rArr; prvCreatSenseDir &rArr; prvCreatSenseFile &rArr; fr_open &rArr; fn_open &rArr; _f_fseek &rArr; _f_extend &rArr; _f_stepnextsector &rArr; _f_alloccluster &rArr; _f_getclustervalue &rArr; _f_getfatsector &rArr; _f_readglsector &rArr; _f_writeglsector
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCreatSenseDir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_getcwd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreateAndVerifySampleFiles
</UL>

<P><STRONG><a name="[d7]"></a>prvDataInformationWrite</STRONG> (Thumb, 588 bytes, Stack size 264 bytes, file-system-demo.o(i.prvDataInformationWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvDataInformationWrite &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Add_Data
</UL>

<P><STRONG><a name="[71]"></a>prvEEPROM_CurrentAddrSaveCommand</STRONG> (Thumb, 320 bytes, Stack size 120 bytes, sample-cli-commands.o(i.prvEEPROM_CurrentAddrSaveCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = prvEEPROM_CurrentAddrSaveCommand &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>prvEEPROM_InfraredTempAddrSaveCommand</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, sample-cli-commands.o(i.prvEEPROM_InfraredTempAddrSaveCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = prvEEPROM_InfraredTempAddrSaveCommand &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>prvEEPROM_MachineAddrSaveCommand</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, sample-cli-commands.o(i.prvEEPROM_MachineAddrSaveCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = prvEEPROM_MachineAddrSaveCommand &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>prvEEPROM_SendTimeSaveCommand</STRONG> (Thumb, 212 bytes, Stack size 80 bytes, sample-cli-commands.o(i.prvEEPROM_SendTimeSaveCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = prvEEPROM_SendTimeSaveCommand &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>prvEEPROM_VibratorAddrSaveCommand</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, sample-cli-commands.o(i.prvEEPROM_VibratorAddrSaveCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = prvEEPROM_VibratorAddrSaveCommand &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>prvGetEvenFlagCommand</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sample-cli-commands.o(i.prvGetEvenFlagCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvGetEvenFlagCommand &rArr; xEventGroupClearBits &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>prvGetRTCTimeCommand</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, sample-cli-commands.o(i.prvGetRTCTimeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvGetRTCTimeCommand &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>prvRunTimeStatsCommand</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sample-cli-commands.o(i.prvRunTimeStatsCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvRunTimeStatsCommand &rArr; vTaskGetRunTimeStats &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>prvSearchDS18B20Command</STRONG> (Thumb, 618 bytes, Stack size 600 bytes, sample-cli-commands.o(i.prvSearchDS18B20Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = prvSearchDS18B20Command &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_DS18B20
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>prvSetRTCTimeCommand</STRONG> (Thumb, 648 bytes, Stack size 56 bytes, sample-cli-commands.o(i.prvSetRTCTimeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvSetRTCTimeCommand &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_CLIGetParameter
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>prvTaskStatsCommand</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sample-cli-commands.o(i.prvTaskStatsCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvTaskStatsCommand &rArr; vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample-cli-commands.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>Init_DS18B20</STRONG> (Thumb, 240 bytes, Stack size 392 bytes, ds18b20_gettemperature.o(i.Init_DS18B20))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = Init_DS18B20 &rArr; EEPROM_Get_Addr &rArr; EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SearchROM
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDS18B20GetTemperatureTask
</UL>

<P><STRONG><a name="[114]"></a>SenseAsk</STRONG> (Thumb, 304 bytes, Stack size 20 bytes, sense_modbus.o(i.SenseAsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SenseAsk
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[112]"></a>SenseRequest</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sense_modbus.o(i.SenseRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SenseRequest &rArr; UartSend &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBCrcCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>

<P><STRONG><a name="[149]"></a>Sense_InitAddr</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, sense_modbus.o(i.Sense_InitAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Sense_InitAddr &rArr; EEPROM_Get_Addr &rArr; EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSense_ModbusTask
</UL>

<P><STRONG><a name="[cb]"></a>EEPROM_ChangeData</STRONG> (Thumb, 114 bytes, Stack size 224 bytes, eeprom_save.o(i.EEPROM_ChangeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_WriteSerialByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
</UL>

<P><STRONG><a name="[d0]"></a>EEPROM_GetData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, eeprom_save.o(i.EEPROM_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EEPROM_GetData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24Cxx_ReadSerialByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Get_Addr
</UL>

<P><STRONG><a name="[e5]"></a>Get_ICCID</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sim7600ce_tcp.o(i.Get_ICCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_ICCID &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSocket
</UL>

<P><STRONG><a name="[a4]"></a>ChangeTimeExecute</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, communication_tcp.o(i.ChangeTimeExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ChangeTimeExecute &rArr; EEPROM_Change_Addr &rArr; EEPROM_ChangeData &rArr; xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Change_Addr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCmd
</UL>

<P><STRONG><a name="[f4]"></a>SenseDS18B20_Register</STRONG> (Thumb, 226 bytes, Stack size 136 bytes, communication_tcp.o(i.SenseDS18B20_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SenseDS18B20_Register &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Machine_Register_CMD
</UL>

<P><STRONG><a name="[f3]"></a>Sense_Register</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, communication_tcp.o(i.Sense_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Sense_Register &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Machine_Register_CMD
</UL>

<P><STRONG><a name="[118]"></a>SwitchOutputExecute</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, communication_tcp.o(i.SwitchOutputExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SwitchOutputExecute &rArr; ReportCmd &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceCmd
</UL>

<P><STRONG><a name="[ee]"></a>InputExecute</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, switch_task.o(i.InputExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InputExecute &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSwitchTask
</UL>

<P><STRONG><a name="[f6]"></a>OutputExecute</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, switch_task.o(i.OutputExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OutputExecute &rArr; xEventGroupClearBits &rArr; vPortExitCritical &rArr; Computer_485_ModeTx &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSwitchTask
</UL>

<P><STRONG><a name="[50]"></a>sd_getphy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sddrv_f.o(i.sd_getphy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sd_getphy &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sddrv_f.o(i.sd_initfunc)
</UL>
<P><STRONG><a name="[4e]"></a>sd_readsector</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sddrv_f.o(i.sd_readsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sd_readsector &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sddrv_f.o(i.sd_initfunc)
</UL>
<P><STRONG><a name="[51]"></a>sd_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sddrv_f.o(i.sd_release))
<BR>[Address Reference Count : 1]<UL><LI> sddrv_f.o(i.sd_initfunc)
</UL>
<P><STRONG><a name="[4f]"></a>sd_writesector</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sddrv_f.o(i.sd_writesector))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sd_writesector &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeTx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer_485_ModeRx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sddrv_f.o(i.sd_initfunc)
</UL>
<P><STRONG><a name="[190]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[163]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[193]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
